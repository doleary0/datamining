#optimized model
import pandas as pd
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
from sklearn import tree
from sklearn import metrics
from sklearn import svm 
from sklearn.model_selection import GridSearchCV, RepeatedStratifiedKFold #importing libraries
SAT_test_set = pd.read_csv("https://raw.githubusercontent.com/andvise/DataAnalyticsDatasets/main/dm_assignment2/sat_dataset_test.csv")#reading test set to pandas dataframe
SAT_test_set = SAT_test_set.replace((np.inf, -np.inf, np.nan), 0) #replacing  infinite and NAN values with 0/dropping rows
SAT_test_set = SAT_test_set.drop(columns=['vars_clauses_ratio',
 'vcg_var_mean',
 'vcg_var_coeff',
 'vcg_var_min',
 'vcg_var_max',
 'vcg_var_entropy',
 'vcg_clause_mean',
 'vcg_clause_coeff',
 'vcg_clause_min',
 'vcg_clause_max',
 'vcg_clause_entropy',
 'vg_mean',
 'vg_coeff',
 'vg_min',
 'vg_max',
 'pnc_ratio_mean',
 'pnc_ratio_coeff',
 'pnc_ratio_min',
 'pnc_ratio_max',
 'pnc_ratio_entropy',
 'pnv_ratio_mean',
 'pnv_ratio_coeff',
 'pnv_ratio_min',
 'pnv_ratio_max',
 'pnv_ratio_stdev',
 'binary_ratio',
 'ternary_ratio',
 'ternary+',
 'hc_fraction',
 'hc_var_mean',
 'hc_var_coeff',
 'hc_var_min',
 'hc_var_max',
 'hc_var_entropy',
 'unit_props_at_depth_1',
 'unit_props_at_depth_4',
 'unit_props_at_depth_16',
 'unit_props_at_depth_64',
 'unit_props_at_depth_256',
 'mean_depth_to_contradiction_over_vars',
 'estimate_log_number_nodes_over_vars',
 'saps_FirstLocalMinStep_CoeffVariance',
 'saps_BestAvgImprovement_CoeffVariance',
 'saps_FirstLocalMinRatio_Mean',
 'saps_FirstLocalMinRatio_CoeffVariance',
 'gsat_FirstLocalMinStep_CoeffVariance',
 'gsat_BestAvgImprovement_CoeffVariance',
 'gsat_FirstLocalMinRatio_Mean',
 'gsat_FirstLocalMinRatio_CoeffVariance',
 'vig_modularty',
 'cvig_db_poly',
 'v_nd_p_node_zeros',
 'v_nd_p_node_entropy',
 'v_nd_p_node_val_rate',
 'v_nd_p_weights_min',
 'v_nd_p_weights_max',
 'v_nd_p_weights_mode',
 'v_nd_p_weights_mean',
 'v_nd_p_weights_std',
 'v_nd_p_weights_zeros',
 'v_nd_p_weights_entropy',
 'v_nd_p_weights_q1',
 'v_nd_p_weights_q2',
 'v_nd_p_weights_q3',
 'v_nd_p_weights_val_rate',
 'v_nd_n_node_zeros',
 'v_nd_n_node_entropy',
 'v_nd_n_node_val_rate',
 'v_nd_n_weights_min',
 'v_nd_n_weights_max',
 'v_nd_n_weights_mode',
 'v_nd_n_weights_mean',
 'v_nd_n_weights_std',
 'v_nd_n_weights_zeros',
 'v_nd_n_weights_entropy',
 'v_nd_n_weights_q1',
 'v_nd_n_weights_q2',
 'v_nd_n_weights_q3',
 'v_nd_n_weights_val_rate',
 'c_nd_p_node_zeros',
 'c_nd_p_node_val_rate',
 'c_nd_p_weights_min',
 'c_nd_p_weights_max',
 'c_nd_p_weights_mode',
 'c_nd_p_weights_mean',
 'c_nd_p_weights_std',
 'c_nd_p_weights_zeros',
 'c_nd_p_weights_entropy',
 'c_nd_p_weights_q1',
 'c_nd_p_weights_q2',
 'c_nd_p_weights_q3',
 'c_nd_p_weights_val_rate',
 'c_nd_n_node_min',
 'c_nd_n_node_mode',
 'c_nd_n_node_mean',
 'c_nd_n_node_std',
 'c_nd_n_node_zeros',
 'c_nd_n_node_q1',
 'c_nd_n_node_q2',
 'c_nd_n_node_q3',
 'c_nd_n_node_val_rate',
 'c_nd_n_weights_min',
 'c_nd_n_weights_max',
 'c_nd_n_weights_mode',
 'c_nd_n_weights_mean',
 'c_nd_n_weights_std',
 'c_nd_n_weights_zeros',
 'c_nd_n_weights_entropy',
 'c_nd_n_weights_q1',
 'c_nd_n_weights_q2',
 'c_nd_n_weights_q3',
 'c_nd_n_weights_val_rate',
 'vg_al_node_zeros',
 'vg_al_node_entropy',
 'vg_al_node_val_rate',
 'vg_al_weights_min',
 'vg_al_weights_max',
 'vg_al_weights_mode',
 'vg_al_weights_mean',
 'vg_al_weights_std',
 'vg_al_weights_zeros',
 'vg_al_weights_q1',
 'vg_al_weights_q2',
 'vg_al_weights_q3',
 'vg_al_weights_val_rate',
 'cg_al_node_zeros',
 'cg_al_node_entropy',
 'cg_al_node_val_rate',
 'cg_al_weights_min',
 'cg_al_weights_zeros',
 'cg_al_weights_val_rate',
 'rg_node_zeros',
 'rg_node_val_rate',
 'rg_weights_min',
 'rg_weights_max',
 'rg_weights_mode',
 'rg_weights_mean',
 'rg_weights_std',
 'rg_weights_zeros',
 'rg_weights_q1',
 'rg_weights_q2',
 'rg_weights_q3',
 'rg_weights_val_rate',
 'big_node_min',
 'big_node_mode',
 'big_node_zeros',
 'big_node_q1',
 'big_node_val_rate',
 'big_weights_min',
 'big_weights_max',
 'big_weights_mode',
 'big_weights_mean',
 'big_weights_std',
 'big_weights_zeros',
 'big_weights_q1',
 'big_weights_q2',
 'big_weights_q3',
 'big_weights_val_rate',
 'and_node_zeros',
 'and_node_val_rate',
 'and_weights_min',
 'and_weights_max',
 'and_weights_mode',
 'and_weights_mean',
 'and_weights_std',
 'and_weights_zeros',
 'and_weights_q1',
 'and_weights_q2',
 'and_weights_q3',
 'and_weights_val_rate',
 'band_node_zeros',
 'band_node_val_rate',
 'band_weights_min',
 'band_weights_max',
 'band_weights_mode',
 'band_weights_mean',
 'band_weights_std',
 'band_weights_zeros',
 'band_weights_q1',
 'band_weights_q2',
 'band_weights_q3',
 'band_weights_val_rate',
 'exo_node_min',
 'exo_node_mode',
 'exo_node_zeros',
 'exo_node_entropy',
 'exo_node_q1',
 'exo_node_val_rate',
 'exo_weights_min',
 'exo_weights_max',
 'exo_weights_mode',
 'exo_weights_mean',
 'exo_weights_std',
 'exo_weights_zeros',
 'exo_weights_q1',
 'exo_weights_q2',
 'exo_weights_q3',
 'exo_weights_val_rate',
 'rwh_0_coeff',
 'rwh_1_coeff',
 'rwh_2_coeff',
 'target'])
X_test = SAT_test_set.to_numpy()
RandomForest2 = RandomForestClassifier(n_estimators=300, random_state=0, criterion = 'entropy', bootstrap = False) #hyperparameters
RandomForest2.fit(X_train, Y_train)
RandomForest2Predictions=RandomForest2.predict(X_test)
print(RandomForest2Predictions)
